{
  "AP Comp Sci Vocab": {
    "!": {
      "Term ": "!",
      "Definition": "A logical operator that reverses the state of a boolean value"
    },
    "&&": {
      "Term ": "&&",
      "Definition": "A logical operator that evaluates to true only if both sides are true"
    },
    "==": {
      "Term ": "==",
      "Definition": "An operator to compare two pieces of primitive data or two addresses"
    },
    "||": {
      "Term ": "||",
      "Definition": "A logical operator that evaluates to true if either side is true"
    },
    "abstract": {
      "Term ": "abstract",
      "Definition": "A class that is never meant to be instantiated except through a concrete subclass"
    },
    "accessor": {
      "Term ": "accessor",
      "Definition": "A method that returns the value of a private instance variable (aka getter)"
    },
    "add": {
      "Term ": "add",
      "Definition": "The method for putting a new item in a list"
    },
    "addresses": {
      "Term ": "addresses",
      "Definition": "The location in memory at which an object is stored"
    },
    "Aggregation": {
      "Term ": "Aggregation",
      "Definition": "Has - A Object relation"
    },
    "algorithm": {
      "Term ": "algorithm",
      "Definition": "A step by step process for solving a problem"
    },
    "AND": {
      "Term ": "AND",
      "Definition": "Only true if both inputs are true"
    },
    "arithmetic operators": {
      "Term ": "arithmetic operators",
      "Definition": "  +, -, *, /, %"
    },
    "array": {
      "Term ": "array",
      "Definition": "A collection of pieces of data stored as indexed items under one name"
    },
    "ArrayIndexOutOfBoundsException": {
      "Term ": "ArrayIndexOutOfBoundsException",
      "Definition": "An error that happens when you refer to an element number larger than your array"
    },
    "ArrayList<type>": {
      "Term ": "ArrayList<type>",
      "Definition": "A template class for keeping track of collections of data with a changing size"
    },
    "assembler": {
      "Term ": "assembler",
      "Definition": "The part of the IDE that turns your code into assembly code"
    },
    "assembly language": {
      "Term ": "assembly language",
      "Definition": "The instruction set used by the CPU (aka machine code)"
    },
    "assign": {
      "Term ": "assign",
      "Definition": "Set a variable to a value"
    },
    "attribute": {
      "Term ": "attribute",
      "Definition": "A variable property of an object (aka field)"
    },
    "autoboxing": {
      "Term ": "autoboxing",
      "Definition": "A feature of Java that converts primitive types to their class counterpart"
    },
    "base 2 logarithm": {
      "Term ": "base 2 logarithm",
      "Definition": "A mathematical operation that returns what power of 2 a number is"
    },
    "base case": {
      "Term ": "base case",
      "Definition": "A condition that triggers a recursive process to end"
    },
    "base class": {
      "Term ": "base class",
      "Definition": "A class that another class inherits from (aka superclass)"
    },
    "behavior": {
      "Term ": "behavior",
      "Definition": "An ability of an object (aka method)"
    },
    "Binary Search": {
      "Term ": "Binary Search",
      "Definition": "A search technique on ordered data that cuts the list in half on each check"
    },
    "bit": {
      "Term ": "bit",
      "Definition": "A binary digit"
    },
    "block": {
      "Term ": "block",
      "Definition": "A piece of code that is separated from the code around it"
    },
    "body": {
      "Term ": "body",
      "Definition": "The code inside of a method"
    },
    "boolean": {
      "Term ": "boolean",
      "Definition": "A type of variable or operation that evaluates to true or false"
    },
    "braces": {
      "Term ": "braces",
      "Definition": "Symbols that define the start and end of a block of code"
    },
    "break": {
      "Term ": "break",
      "Definition": "A statement to jump outside of a loop or conditional branch"
    },
    "bugs": {
      "Term ": "bugs",
      "Definition": "Problems that prevent code from working properly"
    },
    "byte": {
      "Term ": "byte",
      "Definition": "Eight bits"
    },
    "bytecode": {
      "Term ": "bytecode",
      "Definition": "The Java code that is ready to be processed by an interpreter"
    },
    "capacity": {
      "Term ": "capacity",
      "Definition": "The amount of space allocated for a List"
    },
    "case": {
      "Term ": "case",
      "Definition": "Identifies a code choice of a switch statement"
    },
    "cast": {
      "Term ": "cast",
      "Definition": "Forcing an expression of one data type to fit into a variable with a different type"
    },
    "catch": {
      "Term ": "catch",
      "Definition": "A keyword used to collect and handle specific types of exceptions"
    },
    "change": {
      "Term ": "change",
      "Definition": "Setting a part of the condition to a different value so the code doesn't loop infinitely"
    },
    "char": {
      "Term ": "char",
      "Definition": "A data type for holding a single letter, digit or symbol "
    },
    "class": {
      "Term ": "class",
      "Definition": "Code that defines the attributes and behaviors of an object"
    },
    "class definition": {
      "Term ": "class definition",
      "Definition": "All of the method headers and instance variables that make up a class"
    },
    "class declaration": {
      "Term ": "class declaration",
      "Definition": "The header line of a class"
    },
    "class variable": {
      "Term ": "class variable",
      "Definition": "A variable that is shared among all instances of a class (aka static field)"
    },
    "client": {
      "Term ": "client",
      "Definition": "A class that uses another class"
    },
    "column": {
      "Term ": "column",
      "Definition": "A vertical organization of items in a 2D array, the second set of brackets"
    },
    "comments": {
      "Term ": "comments",
      "Definition": "A written description of what code does for human readers"
    },
    "Comparable<type>": {
      "Term ": "Comparable<type>",
      "Definition": "An interface requiring compareTo that allows built-in sort and searches to be used on a class"
    },
    "comparator": {
      "Term ": "comparator",
      "Definition": "A class implementing compare that creates a tool for sorting and searching"
    },
    "compare": {
      "Term ": "compare",
      "Definition": "A tool that is used to check the order between two objects passed as parameters"
    },
    "compareTo": {
      "Term ": "compareTo",
      "Definition": "A method that is used to check the order between an object and a single parameter"
    },
    "comparisons": {
      "Term ": "comparisons",
      "Definition": "When an expression or constant is checked for a relationship with another"
    },
    "compatible": {
      "Term ": "compatible",
      "Definition": "Data types that contain similar enough values that they can be cast to each other"
    },
    "compiler": {
      "Term ": "compiler",
      "Definition": "The part of an IDE used to change turn code into software"
    },
    "compound": {
      "Term ": "compound",
      "Definition": "A complex line of code with made of multiple expressions"
    },
    "compound assign": {
      "Term ": "compound assign",
      "Definition": "  +=, -=, *=, /=, %="
    },
    "concatenation": {
      "Term ": "concatenation",
      "Definition": "An operation that creates a new string out of other strings by sticking them together"
    },
    "concrete": {
      "Term ": "concrete",
      "Definition": "A class that can be instantiated, a non abstract class"
    },
    "condition": {
      "Term ": "condition",
      "Definition": "A statement that can be evaluated to determine if a piece of code will be run"
    },
    "conditional": {
      "Term ": "conditional",
      "Definition": "A statement that is dependent on an expression that evaluates to true or false"
    },
    "console application": {
      "Term ": "console application",
      "Definition": "A piece of software that runs without a GUI"
    },
    "conspicuous": {
      "Term ": "conspicuous",
      "Definition": "Variable names that clearly describe the value they represent"
    },
    "constant": {
      "Term ": "constant",
      "Definition": "A variable that cannot change once its initial value is assigned"
    },
    "constructor": {
      "Term ": "constructor",
      "Definition": "A piece of code that is run when an object is instantiated/created"
    },
    "contents": {
      "Term ": "contents",
      "Definition": "What is inside of a data set or element"
    },
    "convention": {
      "Term ": "convention",
      "Definition": "An agreed upon way of coding that is not required by the computer"
    },
    "convert": {
      "Term ": "convert",
      "Definition": "Changing values of one type into another"
    },
    "copy constructor": {
      "Term ": "copy constructor",
      "Definition": "A special constructor that takes a parameter of the same type as the class being created"
    },
    "CPU": {
      "Term ": "CPU",
      "Definition": "The \"brain\" of your computer."
    },
    "data type": {
      "Term ": "data type",
      "Definition": "The kind of information that can be held in a variable"
    },
    "debugger": {
      "Term ": "debugger",
      "Definition": "The part of an IDE that helps you find errors in your code"
    },
    "declaration": {
      "Term ": "declaration",
      "Definition": "The line where a class, method or variable is first created"
    },
    "decrement": {
      "Term ": "decrement",
      "Definition": "Decreasing a value by 1"
    },
    "default constructor": {
      "Term ": "default constructor",
      "Definition": "A constructor provided by the compiler when no constructor is coded"
    },
    "DeMorgan's Laws": {
      "Term ": "DeMorgan's Laws",
      "Definition": "Rules that describe how logical operations relate and transform into each other"
    },
    "derived class": {
      "Term ": "derived class",
      "Definition": "A class that inherits from another class (aka subclass)"
    },
    "digital": {
      "Term ": "digital",
      "Definition": "Using whole numbers"
    },
    "direct manipulation interface": {
      "Term ": "direct manipulation interface",
      "Definition": "An interface that allows the user to interact with program constructs manually"
    },
    "do-while": {
      "Term ": "do-while",
      "Definition": "A type of loop with the condition at the end that always executes at least once"
    },
    "document": {
      "Term ": "document",
      "Definition": "To create help files and comments to make notes for future users and editors"
    },
    "dot notation": {
      "Term ": "dot notation",
      "Definition": "A way of referencing a method or variable that is part of a class"
    },
    "double": {
      "Term ": "double",
      "Definition": "The most common data type for decimal numbers"
    },
    "editor": {
      "Term ": "editor",
      "Definition": "The part of an IDE used to type code"
    },
    "element": {
      "Term ": "element",
      "Definition": "A individual item in an array or list"
    },
    "empty string": {
      "Term ": "empty string",
      "Definition": "A string variable that has memory allocated but no text (\"\")"
    },
    "encapsulation": {
      "Term ": "encapsulation",
      "Definition": "The practice of using setters and getters to control access to private variables"
    },
    "equals": {
      "Term ": "equals",
      "Definition": "A method that compares objects to see if they are the same"
    },
    "equation": {
      "Term ": "equation",
      "Definition": "A mathematical statement that two expressions have the same value"
    },
    "evaluate": {
      "Term ": "evaluate",
      "Definition": "Determine the current value of an expression"
    },
    "exception": {
      "Term ": "exception",
      "Definition": "An problem that occurs while a program is running that causes it to crash"
    },
    "exception handling": {
      "Term ": "exception handling",
      "Definition": "Code intended to catch runtime errors and handle them to prevent a crash"
    },
    "executable": {
      "Term ": "executable",
      "Definition": "A file ready to be run as a program by an operating system"
    },
    "expression": {
      "Term ": "expression",
      "Definition": "A piece of code that will be evaluated when it is run"
    },
    "extends": {
      "Term ": "extends",
      "Definition": "A keyword that is used to cause a class to inherit from another class"
    },
    "false": {
      "Term ": false,
      "Definition": "The opposite of true"
    },
    "field": {
      "Term ": "field",
      "Definition": "A variable created and stored at the object level (aka instance variable)"
    },
    "final": {
      "Term ": "final",
      "Definition": "A keyword used for creating a constant"
    },
    "finally": {
      "Term ": "finally",
      "Definition": "A keyword that attempts to run code after an exception has happened"
    },
    "flowchart": {
      "Term ": "flowchart",
      "Definition": "A graphic showing the paths that execution of a program may follow"
    },
    "for": {
      "Term ": "for",
      "Definition": "A type of loop with the initialization, condtion and chage built into the header. A fixed number of times loop. "
    },
    "for-each loop": {
      "Term ": "for-each loop",
      "Definition": "A special code block for traversing an array or list"
    },
    "formatting": {
      "Term ": "formatting",
      "Definition": "Making numbers appear in as text in a particular way"
    },
    "gate": {
      "Term ": "gate",
      "Definition": "A component that does simple binary calculations"
    },
    "generic type": {
      "Term ": "generic type",
      "Definition": "A superclass type shared by multiple subclass types"
    },
    "getter": {
      "Term ": "getter",
      "Definition": "A method that returns the value of a private instance variable (aka accessor)"
    },
    "GUI": {
      "Term ": "GUI",
      "Definition": "The graphical user interface for interacting with a user"
    },
    "hardware": {
      "Term ": "hardware",
      "Definition": "Physical component of a device"
    },
    "HAS-A": {
      "Term ": "HAS-A",
      "Definition": "A relationship between classes where one class is used by another"
    },
    "hierarchy": {
      "Term ": "hierarchy",
      "Definition": "A system for organizing in which each item is a superclass and/or subclass of another item"
    },
    "high level language": {
      "Term ": "high level language",
      "Definition": "A language like Java that is converted to machine code before it is executated"
    },
    "IDE": {
      "Term ": "IDE",
      "Definition": "An integrated development environment that contains the tools you need to write a program"
    },
    "if-else": {
      "Term ": "if-else",
      "Definition": "The keywords used for conditional branching"
    },
    "immutable": {
      "Term ": "immutable",
      "Definition": "A value that cannot be changed once created"
    },
    "implementation": {
      "Term ": "implementation",
      "Definition": "The final code used to solve a programming problem"
    },
    "implements": {
      "Term ": "implements",
      "Definition": "A keyword that indicates a class will perform the job of an interface"
    },
    "implicit": {
      "Term ": "implicit",
      "Definition": "Something that is assumed to be the case if not stated otherwise"
    },
    "import": {
      "Term ": "import",
      "Definition": "A keyword that allows you to use code from another package in your code"
    },
    "increment": {
      "Term ": "increment",
      "Definition": "To increase a value by a set amount"
    },
    "indentation": {
      "Term ": "indentation",
      "Definition": "Shifting code to the right to indicated that it is inside a block"
    },
    "index": {
      "Term ": "index",
      "Definition": "The number that represents each letter or element in a String, array or a List"
    },
    "IndexOutOfBoundsException": {
      "Term ": "IndexOutOfBoundsException",
      "Definition": "An error that happens when code accesses an element in an array that doesn't exist"
    },
    "infinite loop": {
      "Term ": "infinite loop",
      "Definition": "A piece of code that repeats itself forever"
    },
    "information hiding": {
      "Term ": "information hiding",
      "Definition": "The practice of making instance variables private to protect the internals operations of the code"
    },
    "inheritance": {
      "Term ": "inheritance",
      "Definition": "When a subclass gets code and variables originally created in the parent class"
    },
    "initialize": {
      "Term ": "initialize",
      "Definition": "Allocate the memory for an array and set up beginning values"
    },
    "Insertion Sort": {
      "Term ": "Insertion Sort",
      "Definition": "A sort with O(n^2) speed that finds the correct position of each element swapping as needed"
    },
    "instance": {
      "Term ": "instance",
      "Definition": "An object based on a class that exists when a program is running"
    },
    "instance variable": {
      "Term ": "instance variable",
      "Definition": "A variable stored at the class level (aka field)"
    },
    "instantiate": {
      "Term ": "instantiate",
      "Definition": "Creating and setting up and actual instance of a class to link to its variable, uses \"new\" keyword"
    },
    "int": {
      "Term ": "int",
      "Definition": "The most common data type for non decimal numbers"
    },
    "integer division": {
      "Term ": "integer division",
      "Definition": "The answer for why 7/2 is 3 and not 3.5"
    },
    "interface": {
      "Term ": "interface",
      "Definition": "A programming construct that provides headers of required methods, but no code or variables"
    },
    "interpret": {
      "Term ": "interpret",
      "Definition": "Preparing a Java application to be run for a specific operating system"
    },
    "invoke": {
      "Term ": "invoke",
      "Definition": "A word meaning to call a method and run its code"
    },
    "IS-A": {
      "Term ": "IS-A",
      "Definition": "A subclass/superclass relationship between classes"
    },
    "iteration": {
      "Term ": "iteration",
      "Definition": "One of many times executing the same piece of code"
    },
    "iterative statements": {
      "Term ": "iterative statements",
      "Definition": "Sections of code that repeat in a predictable order"
    },
    "JavaDoc": {
      "Term ": "JavaDoc",
      "Definition": "A tool that creates documentation for code using comments with special syntax and keywords"
    },
    "JDK": {
      "Term ": "JDK",
      "Definition": "The Java Development Kit needed for writing Java code"
    },
    "key": {
      "Term ": "key",
      "Definition": "A piece of data in an object used to sort on"
    },
    "length": {
      "Term ": "length",
      "Definition": "The number of items in an array"
    },
    "length() method": {
      "Term ": "length() method",
      "Definition": "Used to find the number of characters in a string"
    },
    "literal strings": {
      "Term ": "literal strings",
      "Definition": "Text that is written in code between quotation marks"
    },
    "local variable": {
      "Term ": "local variable",
      "Definition": "A variable created inside a method or other block of code"
    },
    "logic error": {
      "Term ": "logic error",
      "Definition": "A coding mistake that causes code to act differently than planned"
    },
    "logical operators": {
      "Term ": "logical operators",
      "Definition": "Operators that combine or compare boolean expressions (eg. &&, ||, !)"
    },
    "loop invariant": {
      "Term ": "loop invariant",
      "Definition": "A relationship between variables that is checked to determine whether to loop again"
    },
    "loops": {
      "Term ": "loops",
      "Definition": "Any piece of code that repeats when it reaches the end"
    },
    "machine code": {
      "Term ": "machine code",
      "Definition": "A CPU specific binary language (aka assembly code)"
    },
    "Mergesort": {
      "Term ": "Mergesort",
      "Definition": "A sort with O(n log n) speed that breaks the data set in half calling itself recursively"
    },
    "method": {
      "Term ": "method",
      "Definition": "Code that defines an ability or behavior of an object"
    },
    "minimized": {
      "Term ": "minimized",
      "Definition": "Code that takes the least space possible"
    },
    "modifier": {
      "Term ": "modifier",
      "Definition": "A method used to change the value of a private variable (aka setter, mutator)"
    },
    "modulus": {
      "Term ": "modulus",
      "Definition": "%, An operator for finding the remainder from integer division"
    },
    "motherboard": {
      "Term ": "motherboard",
      "Definition": "Computer component all other parts connect to"
    },
    "mutator": {
      "Term ": "mutator",
      "Definition": "A method used to change the value of a private variable (aka setter, modifer)"
    },
    "nested": {
      "Term ": "nested",
      "Definition": "Code that is inside another block of code"
    },
    "nested loop": {
      "Term ": "nested loop",
      "Definition": "A piece of repeating code inside another piece of repeating code"
    },
    "new operator": {
      "Term ": "new operator",
      "Definition": "A keyword used when calling the constructor for an object being instantiated"
    },
    "newline": {
      "Term ": "newline",
      "Definition": "A character that tells the console to move the cursor to the next line"
    },
    "no-args constructor": {
      "Term ": "no-args constructor",
      "Definition": "An empy constructor, one that takes no parameters"
    },
    "NOT": {
      "Term ": "NOT",
      "Definition": "Reverses value of the input"
    },
    "null": {
      "Term ": "null",
      "Definition": "A keyword meaning \"has no value\""
    },
    "O notation": {
      "Term ": "O notation",
      "Definition": "A way of showing the relative theoretical speed of a search or sort algorithm"
    },
    "object": {
      "Term ": "object",
      "Definition": "An instance of a class that exists when a program is running"
    },
    "object model": {
      "Term ": "object model",
      "Definition": "A planning tool used to design a class before coding it"
    },
    "object oriented programming": {
      "Term ": "object oriented programming",
      "Definition": "A programming philosophy in which code is written to represent real world things or ideas"
    },
    "OR": {
      "Term ": "OR",
      "Definition": "True if any input is true"
    },
    "order of operators": {
      "Term ": "order of operators",
      "Definition": "The rules that determine how the computer chooses which operations are evaluated first"
    },
    "overloaded": {
      "Term ": "overloaded",
      "Definition": "When a method is written in different ways with two or more possible parameter sets"
    },
    "package": {
      "Term ": "package",
      "Definition": "A collection of java classes"
    },
    "parameter": {
      "Term ": "parameter",
      "Definition": "A variable whose value or reference is passed into a method"
    },
    "parse": {
      "Term ": "parse",
      "Definition": "Move through a string one letter or word at a time"
    },
    "partitioning": {
      "Term ": "partitioning",
      "Definition": "The process of breaking a set into two or more pieces"
    },
    "pass by reference": {
      "Term ": "pass by reference",
      "Definition": "When a parameter is sent as a memory location"
    },
    "pass by value": {
      "Term ": "pass by value",
      "Definition": "When a parameter is sent as data"
    },
    "pattern recognition": {
      "Term ": "pattern recognition",
      "Definition": "The ability to recognize a form of organization in a data set"
    },
    "peripheral": {
      "Term ": "peripheral",
      "Definition": "Computer part not inside the chassis"
    },
    "pivot": {
      "Term ": "pivot",
      "Definition": "A value in a set used to split the set into two parts on which the data will be sorted"
    },
    "polymorphism": {
      "Term ": "polymorphism",
      "Definition": "The concept that a single named behavior can be performed differently by various subclasses"
    },
    "primitive type": {
      "Term ": "primitive type",
      "Definition": "One of the built-in non-object data types that is stored by value"
    },
    "printf": {
      "Term ": "printf",
      "Definition": "A special method for Strings that includes formatting characters in the string literal"
    },
    "private": {
      "Term ": "private",
      "Definition": "A keyword that makes a variable or method accessible from only inside the class"
    },
    "procedural language": {
      "Term ": "procedural language",
      "Definition": "A language where programs are expected to operate in a predictable order"
    },
    "pseudocode": {
      "Term ": "pseudocode",
      "Definition": "A way of designing a program using written descriptions of what the code will be"
    },
    "public": {
      "Term ": "public",
      "Definition": "A keyword that makes a variable or method accessible from outside the class"
    },
    "Quicksort": {
      "Term ": "Quicksort",
      "Definition": "A sort with O(n log n) speed that splits the data using a randomly chosen pivot"
    },
    "RAM": {
      "Term ": "RAM",
      "Definition": "Computer component that stores currently in-use data"
    },
    "readability": {
      "Term ": "readability",
      "Definition": "A measure of how easily something is understood by others"
    },
    "recursive": {
      "Term ": "recursive",
      "Definition": "A piece of code that uses itself to solve the problem"
    },
    "redundancy": {
      "Term ": "redundancy",
      "Definition": "Allows a something to be understood even if some of it is missing or wrong"
    },
    "reference": {
      "Term ": "reference",
      "Definition": "An address that holds the memory location of the variable's data"
    },
    "regular expression": {
      "Term ": "regular expression",
      "Definition": "A predefined set of codes for limiting parse and search type String operations"
    },
    "relational operators": {
      "Term ": "relational operators",
      "Definition": "Operators that compare two expressions (eg. <>, !=, ==)"
    },
    "remove": {
      "Term ": "remove",
      "Definition": "A method for taking an item out of a list and filling any gap"
    },
    "reserved word": {
      "Term ": "reserved word",
      "Definition": "Special words used by the Java language that cannot be used for naming"
    },
    "return": {
      "Term ": "return",
      "Definition": "A statement that causes a method to end and may send back a value to the calling code"
    },
    "return type": {
      "Term ": "return type",
      "Definition": "The kind of data that will be sent back by a method"
    },
    "row": {
      "Term ": "row",
      "Definition": "A horizontal section of a 2D array, the first set of square brackets"
    },
    "scope": {
      "Term ": "scope",
      "Definition": "The part of code in which a variable exists or is accessible"
    },
    "search": {
      "Term ": "search",
      "Definition": "Finding a particular item in a list, array or other collection"
    },
    "Selection Sort": {
      "Term ": "Selection Sort",
      "Definition": "A sort with O(n^2) speed that checks each element against every other element"
    },
    "Sequential Search": {
      "Term ": "Sequential Search",
      "Definition": "A search that checks each element from beginning to end"
    },
    "set": {
      "Term ": "set",
      "Definition": "A method for changing the value of an item in a list"
    },
    "setter": {
      "Term ": "setter",
      "Definition": "A method that is used to change the value of a private variable (aka modifier)"
    },
    "short-circuit evaluation": {
      "Term ": "short-circuit evaluation",
      "Definition": "A chain of relational or conditional expressions that stops evaluating as soon as the result is known"
    },
    "signature": {
      "Term ": "signature",
      "Definition": "The header line of a method that defines its return type, name and parameter list"
    },
    "size": {
      "Term ": "size",
      "Definition": "The number of items in an ArrayList"
    },
    "software engineering": {
      "Term ": "software engineering",
      "Definition": "Planning, designing, building and testing computer programs"
    },
    "sorting": {
      "Term ": "sorting",
      "Definition": "Putting a collection of data in order"
    },
    "source code": {
      "Term ": "source code",
      "Definition": "The original code created by the programmer"
    },
    "square brackets": {
      "Term ": "square brackets",
      "Definition": "Used to create arrays and refer to a specific element"
    },
    "stack": {
      "Term ": "stack",
      "Definition": "The part of the computer that keeps track currently running layers of code"
    },
    "statement": {
      "Term ": "statement",
      "Definition": "A complete and syntactically correct line of code"
    },
    "static field": {
      "Term ": "static field",
      "Definition": "A variable that is shared among all instances of a class (aka class variable)"
    },
    "static method": {
      "Term ": "static method",
      "Definition": "A method that uses no (non-static) instance variables and can be called without an instance of the class"
    },
    "String": {
      "Term ": "String",
      "Definition": "A built-in class for holding words, sentences, parahraphes, etc. "
    },
    "style": {
      "Term ": "style",
      "Definition": "The conventions agreed upon by programmers for how to write code to be understood by others"
    },
    "subclass": {
      "Term ": "subclass",
      "Definition": "A class that inherits from another class"
    },
    "subinterface": {
      "Term ": "subinterface",
      "Definition": "An interface that inherits from another interface"
    },
    "subscript": {
      "Term ": "subscript",
      "Definition": "A way of writing an index to an array in pseudocode"
    },
    "substring": {
      "Term ": "substring",
      "Definition": "A part of a text value"
    },
    "super": {
      "Term ": "super",
      "Definition": "A keyword that is used to access methods and fields from a base class"
    },
    "superclass": {
      "Term ": "superclass",
      "Definition": "A class that another class inherits from (aka base class)"
    },
    "superinterface": {
      "Term ": "superinterface",
      "Definition": "An interface that another interface inherits from"
    },
    "switch": {
      "Term ": "switch",
      "Definition": "A keyword that chooses what code to run based on a single value"
    },
    "symbolic": {
      "Term ": "symbolic",
      "Definition": "A name that represents another value"
    },
    "syntax": {
      "Term ": "syntax",
      "Definition": "The rules for how code must be entered to compile and work"
    },
    "syntax error": {
      "Term ": "syntax error",
      "Definition": "A coding mistake that prevents code from compiling"
    },
    "testing": {
      "Term ": "testing",
      "Definition": "Checking the condition on a piece of code"
    },
    "this": {
      "Term ": "this",
      "Definition": "A keyword that refers to the current instance of the class"
    },
    "transistor": {
      "Term ": "transistor",
      "Definition": "A tiny on-off switch"
    },
    "transmission": {
      "Term ": "transmission",
      "Definition": "Moving something from one place to another"
    },
    "traversal": {
      "Term ": "traversal",
      "Definition": "The process of interacting with each element in an array or list in order"
    },
    "true": {
      "Term ": true,
      "Definition": "The opposite of false"
    },
    "try": {
      "Term ": "try",
      "Definition": "A keyword that begins a block code that could cause an exception"
    },
    "Two-Dimensional Array": {
      "Term ": "Two-Dimensional Array",
      "Definition": "An array of arrays"
    },
    "uninitialized string": {
      "Term ": "uninitialized string",
      "Definition": "A string variable that is named but has nowhere to store its data"
    },
    "value": {
      "Term ": "value",
      "Definition": "Data represented by a variable or expression"
    },
    "variable": {
      "Term ": "variable",
      "Definition": "A named value in a program that can contain a specific type of data"
    },
    "visual prototyping and design tools": {
      "Term ": "visual prototyping and design tools",
      "Definition": "Tools that allow an engineer to plan their software through drawings and flow models"
    },
    "while": {
      "Term ": "while",
      "Definition": "A type of loop that runs as long as its condition is true"
    },
    "whitespace": {
      "Term ": "whitespace",
      "Definition": "Any space, tab or new line charcter in the code"
    },
    "wrapper class": {
      "Term ": "wrapper class",
      "Definition": "A class designed to add behaviors to a primitive type"
    },
    "XOR": {
      "Term ": "XOR",
      "Definition": "True if and only if one input is true"
    }
  }
}